// Message
Create a store using redux and react to store first name, last name, email and message

// Answer
Certainly! To create a simple store using Redux and React to manage first name, last name, email, and message, you can follow the steps below. This example will include a form to input these details and buttons to dispatch the respective actions.

Firstly, install the required dependencies:
```bash
npm install react-redux @reduxjs/toolkit
```

Now let's get into the code.

1. **Initialize the Redux Store**

Create a new file called `store.js`:

```javascript
// store.js
import { configureStore } from '@reduxjs/toolkit';
import formReducer from './formSlice';

export const store = configureStore({
  reducer: {
    form: formReducer
  }
});
```

2. **Create a Slice for the Form Data**

Create a new file called `formSlice.js`:

```javascript
// formSlice.js
import { createSlice } from '@reduxjs/toolkit';

export const formSlice = createSlice({
  name: 'form',
  initialState: {
    firstName: '',
    lastName: '',
    email: '',
    message: ''
  },
  reducers: {
    setFirstName: (state, action) => {
      state.firstName = action.payload;
    },
    setLastName: (state, action) => {
      state.lastName = action.payload;
    },
    setEmail: (state, action) => {
      state.email = action.payload;
    },
    setMessage: (state, action) => {
      state.message = action.payload;
    }
  }
});

export const { setFirstName, setLastName, setEmail, setMessage } = formSlice.actions;
export default formSlice.reducer;
```

3. **Create the React Component**

Create a new file called `FormComponent.js`:

```javascript
// FormComponent.js
import React from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { setFirstName, setLastName, setEmail, setMessage } from './formSlice';

const FormComponent = () => {
  const dispatch = useDispatch();
  const { firstName, lastName, email, message } = useSelector((state) => state.form);

  return (
    <div>
      <input 
        type="text" 
        placeholder="First Name" 
        value={firstName} 
        onChange={(e) => dispatch(setFirstName(e.target.value))}
      />
      <input 
        type="text" 
        placeholder="Last Name" 
        value={lastName} 
        onChange={(e) => dispatch(setLastName(e.target.value))}
      />
      <input 
        type="email" 
        placeholder="Email" 
        value={email} 
        onChange={(e) => dispatch(setEmail(e.target.value))}
      />
      <textarea 
        placeholder="Message" 
        value={message} 
        onChange={(e) => dispatch(setMessage(e.target.value))}
      />
      <button onClick={() => console.log({ firstName, lastName, email, message })}>
        Submit
      </button>
    </div>
  );
};

export default FormComponent;
```

4. **Wrap the App with the Redux Provider**

In your `App.js`:

```javascript
// App.js
import React from 'react';
import { Provider } from 'react-redux';
import { store } from './store';
import FormComponent from './FormComponent';

function App() {
  return (
    <Provider store={store}>
      <FormComponent />
    </Provider>
  );
}

export default App;
```

This is a simple and precise way to set up a form in React using Redux for state management. When you click on the Submit button, it will log the form data to the console.

Hope this helps! Feel free to ask for further clarification.